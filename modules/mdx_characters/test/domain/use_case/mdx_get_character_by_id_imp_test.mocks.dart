// Mocks generated by Mockito 5.4.1 from annotations
// in mdx_characters/test/domain/use_case/mdx_get_character_by_id_imp_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mdx_characters/mdx_characters.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMDXCharacter_0 extends _i1.SmartFake implements _i2.MDXCharacter {
  _FakeMDXCharacter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MDXCharacterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMDXCharacterRepository extends _i1.Mock
    implements _i2.MDXCharacterRepository {
  MockMDXCharacterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.MDXCharacter>> getAllCharacters(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCharacters,
          [page],
        ),
        returnValue:
            _i3.Future<List<_i2.MDXCharacter>>.value(<_i2.MDXCharacter>[]),
      ) as _i3.Future<List<_i2.MDXCharacter>>);
  @override
  _i3.Future<_i2.MDXCharacter> getCharacterById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getCharacterById,
          [id],
        ),
        returnValue: _i3.Future<_i2.MDXCharacter>.value(_FakeMDXCharacter_0(
          this,
          Invocation.method(
            #getCharacterById,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.MDXCharacter>);
  @override
  _i3.Future<List<_i2.MDXCharacter>> getCharactersByIds(List<int>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharactersByIds,
          [ids],
        ),
        returnValue:
            _i3.Future<List<_i2.MDXCharacter>>.value(<_i2.MDXCharacter>[]),
      ) as _i3.Future<List<_i2.MDXCharacter>>);
  @override
  _i3.Future<List<_i2.MDXCharacter>> getFilteredCharacters(
          _i2.MDXCharacterFilter? filter) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredCharacters,
          [filter],
        ),
        returnValue:
            _i3.Future<List<_i2.MDXCharacter>>.value(<_i2.MDXCharacter>[]),
      ) as _i3.Future<List<_i2.MDXCharacter>>);
}
